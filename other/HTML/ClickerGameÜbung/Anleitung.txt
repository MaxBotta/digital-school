
CLICKER GAME ANLEITUNG

Diese Übung war ein Special, da es vor den Ferien war. Hier haben wir ein Cilcker Spiel gebaut, 
bei dem man eine Katze immer schnell anklicken muss, bevor sie wieder verschwindet.
Die Katze geht immer an zufällige Positionen alle 1.5 Sekunden oder wenn sie angeklcikt wird.
Klickt man daneben, verliert man einen Punkt. 

Das Spiel ist noch relativ einfach, man kann natürlich noch einige Dinge hinzufügen.
Bisher gibt es kein Ende und keinen Highscore oder ähnliches. Das ist etwas, das wir wann anders einbauen könenn.

Wir haben bisher noch kein JavaScript gemacht und das war eine erste Übung bzw. ein Vorgeschmack dazu, was wir mit JS machen können.
Wenn es an manchen Stellen zu schwierig ist, dann schau am besten im fertigen Projekt nach.

Um das Spiel einmal vorher auszuprobieren, öffne den ClickerGameFertig Ordner in Visual Studio Cod emit dem Live Server (in index.html dann rechtsklick auf live server öffnen)

Viel Spaß beim ausprobieren. Wenn du Probleme hast, kannst du in den fertigen Code schauen oder mir schreiben.

Viele Grüße,

Max


1.  Neues Projekt anlegen.
    -  Neuen Ordner anlegen mit dem Namen "ClickerGame".
    -  index.html, style.css und game.js anlegen.

2.  - In index.html ein h2 Element für den Punktestand anlegen und ein Bild mit dem Katzengesicht (catface.svg).
    - Außerdem müssen wir unsere style.css verlinken und unsere functions.js datei unten im Body verlinken mit dem <script> Tag.
    - Wir vergeben ids an unseren score und unser Katzengesicht. Diese brauchen wir später in der JavaScript Datei.

    <html>
        <head>
            <title>Cicker Game</title>
            <link rel="stylesheet" href="style.css">
        </head>
        <body>
            <h1>
                SCORE: 
                <span id="score">0</span>
            </h1>
            <div id="click-me" class="box">
                <img src="catface.svg">
            </div>
            <script src="game.js"></script>
        </body>
    </html>

3.  In der style.css Datei müssen wir ein paar Elemente designen.
    - img müssen width und height 100% haben und object-fit: cover, damit das Bild richtig skaliert wird
    - unsere .box Klasse hat das Katzenbild drin und muss position: absolute haben, damit es auf dem Bildschirm frei umherbewegt werden kann
    - transform: translate(-50%, -50%) verschiebt die Koordinate bzw. die Position genau in die Mitte des Bildes (funktioniert auch ohne)
    - transition: 0.1s macht, dass die Elmente eine kurze Zeit brauchen um sich zu bewegen

    body {
        margin: 0px;
        padding: 0px;
    }

    img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        pointer-events: none;
    }

    .box {
        width: 100px;
        height: 100px;
        position: absolute;
        transform: translate(-50%, -50%);
        transition: 0.1s;
    }

    Optional: Wir können noch eine Aniamtion in style.css hinzufügen, damit die Katze kurz verschwindet und wieder auftaucht

    @keyframes hide-show {
        0% {
            opacity: 0;
        }
        100% {
            opacity: 1;
        }
    }


4. Jetzt müssen wir noch unser Game mit JavaScript brauchen

4.1 Alle Variablen anlegen

Hinweise: 
- Variablen werden in JS mit let angelegt
- document.querySelector("#id") gibt uns eine bestimmtes HTML Element zurück, dass wir verändern wollen
- mit new Audio("name_der_datei.wav) können wir Musikdateien laden

    //Variable um unseren Punktestand zu speichern
    let score = 0;

    //Wir speichern unsere HTML Elemente in Variablen
    let box = document.querySelector("#click-me");
    let scoreBox = document.querySelector("#score");

    //Wir laden unsere Audiodateien und speichern diese in variablen
    let hitSound = new Audio('punsh.wav');
    let moveSound = new Audio('woosh.wav');


4.2 Interval, das alle 1.5 Sekunden wiederholt wird mit setInterval()

Hinweise:

setinterval() hat zwei Argumente. Das erste ist die funktion, die ausgeführt werden soll 
und das zweite ist die Zeit zwischen den Ausführungen in Millisekunden (1000Millisekunden = 1Sekunde)

    //Wir erstellen ein Interval, dass alle 1.5 Sekunden die Katze an eine neue Position setzt
    setInterval(function() {
        setBoxToRandPos();
    }, 1500);


4.3 Funktion um die Katze an eine zufällige Position zu setzen

Hinweise:
    - Dazu brauchen wir erst eine Funktion, die uns zufällige Zahlen gibt. Dafür kannst du die Funktion randInt() benutzen
    - Integer bedeuten ind er Informatik ganze Zahlen ohne Komma, daher habe ich die Funktion random integer genannt
    - window.innerHeight und window.innerWidth geben die Höhe und Breite des Bildschirms zurück
    - mit box.style können wir die CSS Eigenschaften unseres box Elements verändern
    - mit box.style.top und left setzen wir also die neue Position unserer Box
    - setTimeout() führt einen Code nach einer bestimmten Zeit genau einmal aus


//Diese Funktion setzt die Katze an eine zufällige Position
//Dann wir die Animation hide-show hinzugefügt und nach 0.8 Sekunden wieder entfernt
function setBoxToRandPos() {
    moveSound.play();
    let x = randInt(100, window.innerWidth - 100);
    let y = randInt(100, window.innerHeight - 100);
    box.style.left = x + "px";
    box.style.top = y + "px";
    box.style.animation = "hide-show 0.5s";
    setTimeout(() => {
        box.style.animation = "none";
    }, 500);

}

//Diese Funktion gibt eine zufällige Ganzzahl zwischen min und max zurück
function randInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}


4.4 Festlegen was passiert, wenn wir auf die Katze klicken

Hinweise:
    - mit box.onclick können wir festelegen, was passieren soll wenn auf ein Element geklickt wird
    - Wenn die katze getroffen wird, erhöhen wir score um 1
    - Der text im h2 mit der id="score wird auf score gesetzt
    - Die Katze wird an eine neue Position gesetzt
    - Es wir dien Sound abgespielt
    - Es wird das Gesicht auf das KO Gesicht geändert und 0.8 Sekudnen später wieder auf Normal


    //Wenn auf die Katze geklickt wird, erhöhen wir unseren Punktestand um 1
    //Wir setzen wir die Katze an eine neue Position
    //Wir spielen wir einen Sound ab
    //Das Gesicht wird auf KO gesetzt und mit setTimeout 0.8 Sekunden (800 Millisekunden) später wieder auf normal gesetzt
    box.onclick = function () {
        score = score + 1;
        scoreBox.innerText = score;
        setBoxToRandPos();
        
        hitSound.play();

        box.querySelector("img").src ="catface-damage.svg";
        setTimeout(() => {
            box.querySelector("img").src ="catface.svg";
        }, 800);
    }


4.5 Festlegen was passiert, wenn man daneben Klickt

- Wenn daneben geklickt wird, ziehen wir eifnach einen Punkt wieder ab

    //Überprüfen ob daneben geklickt wurde
    //Wenn daneben geklickt wird, verringern wir unseren Punktestand um 1
    document.onclick = function (event) {
        if(event.target !== box) {
            score = score - 1;
            scoreBox.innerText = score;
        }
    }

